{{ if eq .Distro "gke" }}

## GKE Node Upgrades

If the sidecar sensor has been deployed to your GKE cluster, you will want to explicitly disable CrowdStrike Falcon from monitoring using labels for the kube-public, kube-system, falcon-operator, and falcon-system namespaces.
For example:
```sh
{{ .KubeCmd }} label namespace falcon-operator sensor.falcon-system.crowdstrike.com/injection=disabled
{{ .KubeCmd }} label namespace falcon-system sensor.falcon-system.crowdstrike.com/injection=disabled
{{ .KubeCmd }} label namespace kube-system sensor.falcon-system.crowdstrike.com/injection=disabled
{{ .KubeCmd }} label namespace kube-public sensor.falcon-system.crowdstrike.com/injection=disabled
```

Because the Falcon Container sensor injector is configured to monitor all namespaces, setting the above labels will ensure that any pod related to k8 control plane and CrowdStrike Falcon are not forwarded to the injector.

## Enabling GCP Workload Identity

### Enabling GCP Workload Identity for the Falcon Sidecar Injector

<details>
  <summary>Click to expand</summary>

The Falcon Container Injector may need [GCP Workload Identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity)
to read GCR or Artifact Registry. In many cases, the GCP Workload Identity is assigned or inherited automatically. However if you
are seeing errors similar to the following, you may need to follow this guide to assign the identity manually.

```log
time="2022-01-14T13:05:11Z" level=error msg="Failed to handle webhook request" error="Failed to retrieve image details for \"gcr.io/\" in container in pod: Failed to get the image config/digest for \"gcr.io/" on \"eu.gcr.io\": Error reading manifest latest in gcr.io/: unauthorized: You don't have the needed permissions to perform this operation, and you may have invalid credentials. To authenticate your request, follow the steps in: https://cloud.google.com/container-registry/docs/advanced-authentication"
```

Conceptually, the following tasks need to be done in order to enable GCR to pull from the injector:

- Create GCP Service Account
- Grant GCR permissions to the newly created Service Account
- Allow Falcon Container to use the newly created Service Account
- Put GCP Service Account handle into your Falcon Container resource for re-deployments

#### Assigning GCP Workload Identity to Falcon Container Injector

<details>
  <summary>Click to expand</summary>

Using both `gcloud` and `{{ .KubeCmd }}` command-line tools, perform the following steps:

- Set up your shell environment variables
  ```sh
  GCP_SERVICE_ACCOUNT=falcon-container-injector

  GCP_PROJECT_ID=$(gcloud config get-value core/project)
  ```

- Create new GCP Service Account
  ```sh
  gcloud iam service-accounts create $GCP_SERVICE_ACCOUNT
  ```

- Grant GCR permissions to the newly created Service Account
  ```sh
  gcloud projects add-iam-policy-binding $PROJECT_ID \
      --member "serviceAccount:$GCP_SERVICE_ACCOUNT@$GCP_PROJECT_ID.iam.gserviceaccount.com" \
      --role roles/containerregistry.ServiceAgent
  ```

- Allow Falcon Sidecar Injector to use the newly created GCP Service Account
  ```sh
  gcloud iam service-accounts add-iam-policy-binding \
      $GCP_SERVICE_ACCOUNT@$GCP_PROJECT_ID.iam.gserviceaccount.com \
      --role roles/iam.workloadIdentityUser \
      --member "serviceAccount:$GCP_PROJECT_ID.svc.id.goog[falcon-system/falcon-operator-sidecar-sensor]"
  ```

- Delete the previously deployed FalconContainer resource:
  ```sh
  {{ .KubeCmd }} delete falconcontainers --all
  ```

- Add the newly created Service Account to your FalconContainer yaml file:
  ```yaml
  spec:
    injector:
      annotations:
        iam.gke.io/gcp-service-account: $GCP_SERVICE_ACCOUNT@$GCP_PROJECT_ID.iam.gserviceaccount.com
  ```

  Do not forget to replace the service account name template with actual name
  ```sh
  echo "$GCP_SERVICE_ACCOUNT@$GCP_PROJECT_ID.iam.gserviceaccount.com"
  ```

- Deploy the FalconContainer resource with the IAM role changes:
  ```sh
  {{ .KubeCmd }} create -f ./my-falcon-container.yaml
  ```

</details>
</details>

### Enabling GCP Workload Identity for the Falcon Admission Controller

<details>
  <summary>Click to expand</summary>

The Falcon Admission Controller may need [GCP Workload Identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity)
to read GCR or Artifact Registry. In many cases, the GCP Workload Identity is assigned or inherited automatically.
Conceptually, the following tasks need to be done in order to enable GCR to pull from the injector:

- Create GCP Service Account
- Grant GCR permissions to the newly created Service Account
- Allow Falcon Admission Controller to use the newly created Service Account
- Put GCP Service Account handle into your Falcon Admission resource for re-deployments

#### Assigning GCP Workload Identity to Falcon Admission Controller

<details>
  <summary>Click to expand</summary>

Using both `gcloud` and `{{ .KubeCmd }}` command-line tools, perform the following steps:

- Set up your shell environment variables
  ```sh
  GCP_SERVICE_ACCOUNT=falcon-admission-controller

  GCP_PROJECT_ID=$(gcloud config get-value core/project)
  ```

- Create new GCP Service Account
  ```sh
  gcloud iam service-accounts create $GCP_SERVICE_ACCOUNT
  ```

- Grant GCR permissions to the newly created Service Account
  ```sh
  gcloud projects add-iam-policy-binding $PROJECT_ID \
      --member "serviceAccount:$GCP_SERVICE_ACCOUNT@$GCP_PROJECT_ID.iam.gserviceaccount.com" \
      --role roles/containerregistry.ServiceAgent
  ```

- Allow Falcon Admission Controller to use the newly created GCP Service Account
  ```sh
  gcloud iam service-accounts add-iam-policy-binding \
      $GCP_SERVICE_ACCOUNT@$GCP_PROJECT_ID.iam.gserviceaccount.com \
      --role roles/iam.workloadIdentityUser \
      --member "serviceAccount:$GCP_PROJECT_ID.svc.id.goog[falcon-kac/falcon-operator-admission-controller]"
  ```

- Delete the previously deployed FalconAdmission resource:
  ```sh
  {{ .KubeCmd }} delete falconadmission --all
  ```

- Add the newly created Service Account to your FalconAdmission yaml file:
  ```yaml
  spec:
    admissionConfig:
      annotations:
        iam.gke.io/gcp-service-account: $GCP_SERVICE_ACCOUNT@$GCP_PROJECT_ID.iam.gserviceaccount.com
  ```

  Do not forget to replace the service account name template with actual name
  ```sh
  echo "$GCP_SERVICE_ACCOUNT@$GCP_PROJECT_ID.iam.gserviceaccount.com"
  ```

- Deploy the FalconAdmission resource with the IAM role changes:
  ```sh
  {{ .KubeCmd }} create -f ./my-falcon-admission.yaml
  ```

</details>
</details>

## Troubleshooting
### GKE AutoPilot Installation Failures

<details>
  <summary>Click to expand</summary>

If your cluster utilizes AllowListSynchronizers and WorkloadAllowlists, you may run into issues with the GKE AutoPilot validating webhooks. An example of such an error in the controller-manager logs is:
```
2025-05-07T16:36:52Z    ERROR    Failed to create new DaemonSet    {"controller": "falconnodesensor", "controllerGroup": "falcon.crowdstrike.com", "controllerKind": "FalconNodeSensor", "FalconNodeSensor": {"name":"falcon-node-sensor"}, "namespace": "", "name": "falcon-node-sensor", "reconcileID": "b9d23c0e-fff5-41ca-9457-a8692d59794e", "DaemonSet": {"name":"falcon-node-sensor"}, "error": "admission webhook \"warden-validating.common-webhooks.networking.gke.io\" denied the request: \n\n=======================================================================\nWorkload Mismatches Found for Allowlist (crowdstrike-falconsensor-deploy-allowlist-v1.0.2):\n=======================================================================\nContainer[0] (falcon-node-sensor):\n- EnvFrom Mismatch: Verify that both configMapRef & secretRef match allowlist value."}
```
WorkloadAllowlists can be retrieved with the following:
```
kubectl get workloadallowlists
```

Specific WorkloadAllowlists can be used for troubleshooting. For example, if you are having issues with the `falcon-node-sensor` DaemonSet, you can run the FalconNodeSensor deployment against the `crowdstrike-falconsensor-deploy-allowlist-v1.0.2` WorkloadAllowlist.
```
spec:
  node:
    gke:
      autopilot: true
      deployAllowListVersion: v1.0.2
```

Failures encountered with WorkloadAllowlist for the cleanup daemonset may require manual intervention to fully uninstall. If the daemonset gets stuck in a continuous loop, complete the following:
```
# Get the cleanup daemonset name
{{ .KubeCmd }} get ds -n <namespace>

# Remove the Finalizer
{{ .KubeCmd }} patch daemonset <daemonset-name> -n <namespace> -p '{"metadata":{"finalizers":[]}}' --type=merge

# Delete the FalconNodeSensor
{{ .KubeCmd }} delete falconnodesensors --all
```
</details>
{{- end -}}
