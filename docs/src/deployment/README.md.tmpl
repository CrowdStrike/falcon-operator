{{- $name := dict "azure" "Azure and AKS" "eks" "EKS and ECR" "eks-fargate" "EKS Fargate and ECR" "generic" "Kubernetes" "gke" "GKE and GCR" -}}
{{- $registry := dict "azure" "ACR (Azure Container Registry)" "eks" "ECR (Elastic Container Registry). A new AWS IAM Policy will be created to allow the operator to push to ECR registry" "eks-fargate" "ECR (Elastic Container Registry). A new AWS IAM Policy will be created to allow the operator to push to ECR registry" "gke" "GCR (Google Container Registry). A new GCP service account for pushing to GCR registry will be created" -}}

<!--- NOTE: DO NOT EDIT! This file is auto-generated. Please update the source *.tmpl file instead --->
# Deployment Guide for {{ get $name .Distro }}
This document will guide you through the installation of the Falcon Operator and deployment of the following custom resources provided by the Falcon Operator:
- [FalconAdmission](../../resources/admission/README.md) with the Falcon Admission Controller image being mirrored from CrowdStrike container registry to {{ get $registry .Distro }}.
- [FalconContainer](../../resources/container/README.md) with the Falcon Container image being mirrored from CrowdStrike container registry to {{ get $registry .Distro }}.
- [FalconImageAnalyzer](../../resources/imageanalyzer/README.md) with the Falcon Image Analyzer image being pull from the CrowdStrike container registry.
{{- if ne .Distro "eks-fargate" }}
- [FalconNodeSensor](../../resources/node/README.md) custom resource to the cluster.
{{- end }}

## Prerequisites

> [!IMPORTANT]
> - The correct CrowdStrike Cloud (not Endpoint) subscription
> - CrowdStrike API Key Pair (*if installing the CrowdStrike Sensor via the CrowdStrike API*)
>
>    > If you need help creating a new API key pair, review our docs: [CrowdStrike Falcon](https://falcon.crowdstrike.com/support/api-clients-and-keys).
>
>  Make sure to assign the following permissions to the key pair:
>  - Falcon Images Download: **Read**
>  - Sensor Download: **Read**

## Installing the Falcon Operator

<details>
  <summary>Click to expand</summary>

- Set up a new Kubernetes cluster or use an existing one.
{{- template "eks.tmpl" . }}

- Install the Falcon Operator by running the following command:
  ```sh
  {{ .KubeCmd }} apply -f https://github.com/crowdstrike/falcon-operator/releases/latest/download/falcon-operator.yaml
  ```

</details>

{{- if ne .Distro "eks-fargate" }}

### Deploying the Falcon Node Sensor

<details>
  <summary>Click to expand</summary>

After the Falcon Operator has deployed, you can now deploy the Falcon Node Sensor:

- Deploy FalconNodeSensor through the cli using the `{{ .KubeCmd }}` command:
  ```sh
  {{ .KubeCmd }} create -n falcon-operator -f https://raw.githubusercontent.com/crowdstrike/falcon-operator/main/config/samples/falcon_v1alpha1_falconnodesensor.yaml --edit=true
  ```
</details>

{{- end }}

### Deploying the Falcon Container Sidecar Sensor

<details>
  <summary>Click to expand</summary>

{{- template "presidecar.tmpl" . }}

#### Create the FalconContainer resource

{{- if eq .Distro "eks-fargate" }}

> [!IMPORTANT]
> If running in a mixed environment with both Fargate and EKS instances, you must set the installNamespace to a different namespace in the FalconContainer Spec i.e. `spec.installNamespace: falcon-Sidecar` to avoid conflicts with FalconNodeSensor running in the `falcon-system` namespace.

- Create an EKS Fargate profile for the FalconContainer resource deployment:
  ```sh
  eksctl create fargateprofile \
    --region "$AWS_REGION" \
    --cluster eks-fargate-cluster \
    --name fp-falcon-system \
    --namespace falcon-system
  ```
{{ end}}

- Create a new FalconContainer resource
  ```sh
  {{ .KubeCmd }} create -f https://raw.githubusercontent.com/crowdstrike/falcon-operator/main/docs/deployment/{{ .Distro }}/falconcontainer.yaml --edit=true
  ```

{{ template "cloudshell.tmpl" . }}

</details>

### Deploying the Falcon Admission Controller

<details>
  <summary>Click to expand</summary>

{{- if eq .Distro "eks-fargate" }}

- Create an EKS Fargate profile for the FalconAdmission resource deployment:
  ```sh
  eksctl create fargateprofile \
    --region "$AWS_REGION" \
    --cluster eks-fargate-cluster \
    --name fp-falcon-kac \
    --namespace falcon-kac
  ```
{{ end }}

- Create a new FalconAdmission resource
  ```sh
  {{ .KubeCmd }} create -f https://raw.githubusercontent.com/crowdstrike/falcon-operator/main/docs/deployment/{{ .Distro }}/falconadmission.yaml --edit=true
  ```

{{- if eq .Distro "azure" }}

- For Azure AKS workloads, you must disable the Azure Admissions Enforcer for the Falcon Admission Controller.
  Add the following annotation to the validating webhook configuration to disable the Azure Admissions Enforcer for the Falcon Admission Controller:
  ```sh
  {{ .KubeCmd }} annotate validatingwebhookconfiguration validating.admission.falcon.crowdstrike.com admissions.enforcer/disabled=true
  ```

{{- end }}

</details>

### Deploying the Falcon Image Analyzer

<details>
  <summary>Click to expand</summary>

{{- if eq .Distro "eks-fargate" }}

- Create an EKS Fargate profile for the FalconImageAnalyzer resource deployment:
  ```sh
  eksctl create fargateprofile \
    --region "$AWS_REGION" \
    --cluster eks-fargate-cluster \
    --name fp-falcon-iar \
    --namespace falcon-iar
  ```
{{ end }}

After the Falcon Operator has deployed, you can now deploy the Image Analyzer:

- Deploy FalconImageAnalyzer through the cli using the `{{ .KubeCmd }}` command:
  ```sh
  {{ .KubeCmd }} create -n falcon-operator -f https://raw.githubusercontent.com/crowdstrike/falcon-operator/main/config/samples/falcon_v1alpha1_falconimageanalyzer.yaml --edit=true
  ```

</details>

## Upgrading

<details>
  <summary>Click to expand</summary>

To upgrade, run the following command:

```sh
{{ .KubeCmd }} apply -f https://github.com/crowdstrike/falcon-operator/releases/latest/download/falcon-operator.yaml
```

If you want to upgrade to a specific version, replace `latest` with the desired version number in the URL:

```sh
VERSION=1.2.3
{{ .KubeCmd }} apply -f https://github.com/CrowdStrike/falcon-operator/releases/download/${VERSION}/falcon-operator.yaml
```

</details>

## Uninstalling

> [!WARNING]
> It is essential to uninstall ALL of the deployed custom resources before uninstalling the Falcon Operator to ensure proper cleanup.

{{- if ne .Distro "eks-fargate" }}

### Uninstalling the Falcon Node Sensor

<details>
  <summary>Click to expand</summary>

Remove the FalconNodeSensor resource by running:

```sh
{{ .KubeCmd }} delete falconnodesensor -A --all
```
{{- end }}

</details>

### Uninstalling the Falcon Container Sidecar Sensor

<details>
  <summary>Click to expand</summary>

Remove the FalconContainer resource. The operator will then uninstall the Falcon Container Sidecar Sensor from the cluster:

```sh
{{ .KubeCmd }} delete falconcontainers --all
```

</details>

### Uninstalling the Falcon Admission Controller

<details>
  <summary>Click to expand</summary>

Remove the FalconAdmission resource. The operator will then uninstall the Falcon Admission Controller from the cluster:

```sh
{{ .KubeCmd }} delete falconadmission --all
```

</details>

### Uninstalling the Falcon Image Analyzer

<details>
  <summary>Click to expand</summary>

Remove the FalconImageAnalyzer resource. The operator will then uninstall the Falcon Image Analyzer from the cluster:

```sh
{{ .KubeCmd }} delete falconimageanalyzer --all
```

</details>

### Uninstalling the Falcon Operator

<details>
  <summary>Click to expand</summary>

Delete the Falcon Operator deployment by running:

```sh
{{ .KubeCmd }} delete -f https://github.com/crowdstrike/falcon-operator/releases/latest/download/falcon-operator.yaml
```

</details>

{{- template "eksiam.tmpl" . }}
{{- template "gkeautopilot.tmpl" . }}
{{- template "gkenode.tmpl" . }}
